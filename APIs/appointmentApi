const express = require("express");
const expressAsyncHandler = require("express-async-handler");
const jwt = require("jsonwebtoken");
const verifyToken = require("./middlewares/verifyToken");
const { ObjectId } = require("mongodb");
const aptment = express.Router();

// Body parser
aptment.use(express.json());
const multer = require("multer");
const upload = multer();
console.log("aptment api file")


aptment.get("/getAptsOfPatient", async(req,res) => 
  {
  const appointmentCollection = req.app.get("appointmentsCollection");
  try {
    const { userId} = req.query;  // Use query parameters for GET request

    if (!userId ) {
      return res.status(400).json({ error: "Missing doctorId or date" });
    }
    const apts = await appointmentCollection.find({ userId: userId}).toArray();  // Convert cursor to array
    res.status(200).json(apts);
  } catch (error) {
    console.error("Error getting appointments:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


aptment.delete("/deleteAppointment/:appointmentId", async (req, res) => {
  const appointmentCollection = req.app.get("appointmentsCollection");
  const bookedSlotsCollection = req.app.get("bookedSlotsCollection");

  try {
    const { appointmentId } = req.params;

    // Find the appointment
    const apt = await appointmentCollection.findOne({ _id: new ObjectId(appointmentId) });
    if (!apt) {
      return res.status(404).json({ message: "Appointment not found" });
    }

    const { doctorId, date, slot } = apt;

    // Find the booked slot entry
    const aptToDelete = await bookedSlotsCollection.findOne({ doctorId, date, slot });
    if (!aptToDelete) {
      return res.status(404).json({ message: "Booked slot not found" });
    }

    // Delete appointment and booked slot
    await appointmentCollection.deleteOne({ _id: new ObjectId(appointmentId) });
    await bookedSlotsCollection.deleteOne({ _id: new ObjectId(aptToDelete._id) });

    res.status(200).json({ message: "Appointment deleted" });
  } catch (error) {
    console.error("Error deleting appointment:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


aptment.post("/check", async (req, res) => {
  console.log("Received request for availability check");

  const appointmentCollection = req.app.get("appointmentsCollection");
  const leavesCollection = req.app.get("leavesCollection");

  try {
    const { doctorId, date } = req.body;
    console.log("Checking for doctorId:", doctorId, "on date:", date);

    if (!doctorId || !date) {
      return res.status(400).json({ error: "Missing doctorId or date" });
    }

    // Check if the doctor is on leave
    const leave = await leavesCollection.findOne({ doctorId, date });
    if (leave) {

      return res.json({ available: false });
    }

    // If doctor is not on leave, return available = true
    res.json({ available: true });

  } catch (error) {
    console.error("Error checking availability:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


aptment.post("/book", async (req, res) => {
  const appointmentCollection = req.app.get("appointmentsCollection");
  const bookedSlotsCollection =req.app.get("bookedSlotsCollection")
  try {
    const { doctorId,doctorName, date ,time,userName,userId} = req.body;
     await appointmentCollection.insertOne({ doctorId,doctorName, date ,time,userName,userId});
     await bookedSlotsCollection.insertOne({doctorId,date,time});
     res.status(200).json({message:"okay appointment confirmed"})
   }
   catch (error) {
    console.error("Error confirming appointment:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
  

aptment.get("/getApts", async(req,res) => 
  {
  const appointmentCollection = req.app.get("appointmentsCollection");
  try {
    const { doctorId, date } = req.query;  // Use query parameters for GET request

    if (!doctorId || !date) {
      return res.status(400).json({ error: "Missing doctorId or date" });
    }
    const apts = await appointmentCollection.find({ doctorId: doctorId, date: date }).toArray();  // Convert cursor to array
    res.status(200).json(apts);
  } catch (error) {
    console.error("Error getting appointments:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

aptment.get("/allApts", async (req, res) => {
 
  const bookedSlotsCollection = req.app.get("bookedSlotsCollection");
  console.log("booked apts fetch")
  try {
    const { doctorId, date } = req.query; // Extract query parameters

    if (!doctorId || !date) {
      return res.status(400).json({ error: "doctorId and date are required" });
    }

    const appointments = await bookedSlotsCollection.find({ doctorId, date }).toArray();
    console.log(appointments)
    let bookedSlots = appointments.map(apt => apt.time); 
    console.log(bookedSlots)
    res.json(bookedSlots);
  } catch (error) {
    console.error("Error fetching appointments:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

module.exports =aptment;